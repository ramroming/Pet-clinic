{"version":3,"sources":["components/layout/nav/burgerlist/Burgerlist.js","components/layout/nav/burgerlist/burgerAnimation.js","components/layout/nav/Nav.js","../node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.js","../node_modules/framer-motion/dist/es/components/AnimatePresence/index.js","../node_modules/framer-motion/dist/es/utils/use-force-update.js"],"names":["menuAnimation","initial","opacity","scale","final","transition","delayChildren","staggerChildren","exit","duration","burgerAnimation","y","Burgerlist","dropList","useState","menuTog","setMenuTog","auth","useContext","authContext","userRole","isLoggedIn","toggle","isLogout","logout","className","onClick","AnimatePresence","motion","div","variants","animate","map","item","index","to","toLowerCase","replace","Nav","src","alt","isActive","presenceId","getPresenceId","id","PresenceChild","_a","children","isPresent","onExitComplete","custom","presenceAffectsLayout","presenceChildren","useConstant","newChildrenMap","context","useMemo","childId","set","allComplete","forEach","isComplete","register","delete","undefined","_","key","React","size","PresenceContext","Provider","value","Map","getChildKey","child","_b","exitBeforeEnter","_c","forceRender","unloadingRef","useRef","__read","forcedRenderCount","setForcedRenderCount","useUnmountEffect","current","useCallback","useForceUpdate","layoutContext","SharedLayoutContext","isSharedLayout","forceUpdate","isInitialRender","filteredChildren","filtered","Children","isValidElement","push","onlyElements","presentChildren","allChildren","exiting","Set","updateChildLookup","childrenToRender","__spreadArray","presentKeys","targetKeys","numPresent","length","i","indexOf","add","get","insertionIndex","splice","removeIndex","findIndex","presentChild","has","cloneElement"],"mappings":"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","file":"static/js/39.034f3197.chunk.js","sourcesContent":["import { AnimatePresence, motion } from \"framer-motion\";\r\nimport { burgerMenu, burgerItem } from \"./burgerAnimation\"\r\nimport { useState, useContext } from \"react\";\r\nimport { authContext } from \"../../../shared/context/auth-context\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst menuAnimation = burgerMenu\r\nconst burgerAnimation = burgerItem\r\n\r\nconst Burgerlist = () => {\r\n\r\n  const [menuTog, setMenuTog] = useState(false)\r\n  const auth = useContext(authContext)\r\n\r\n  let dropList\r\n\r\n  if (auth.userRole === null){\r\n     dropList = [\r\n      auth.isLoggedIn ? 'Logout' : 'Login',\r\n      auth.isLoggedIn ? 'My profile' : 'Signup',\r\n       'Register pet', 'Appointment', 'Adoption', 'About']\r\n  } else {\r\n    dropList = ['Logout']\r\n  }\r\n\r\n\r\n  // const dropList = [\r\n  //   { title: 'Logout' },\r\n  //   { title: 'My profile', href: '/myprofile'},\r\n  //   { title: 'Appointment', href: '/appointment'},\r\n  //   { title: 'Adoption', href: '/myprofile'},\r\n  //   { title: 'My profile', href: '/myprofile'},\r\n  //   { title: 'My profile', href: '/myprofile'},\r\n  // ]\r\n\r\n  const toggle = (isLogout = false) => {\r\n    setMenuTog((menuTog) => {\r\n      return !menuTog\r\n    })\r\n    if (isLogout) {\r\n      auth.logout()\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"dropdown\">\r\n      <i className=\"fa-solid fa-bars  burger-icon\"\r\n        onClick={() => toggle()}></i>\r\n      <AnimatePresence> {\r\n        menuTog && <motion.div variants={menuAnimation}\r\n          initial=\"initial\"\r\n          animate=\"final\"\r\n          exit='exit'\r\n          className=\"droplist flex-col falign-center gap-16p\">\r\n          {\r\n            dropList.map((item, index) => (\r\n              <motion.div \r\n                variants={burgerAnimation}\r\n                key={index}\r\n                >\r\n                \r\n                  <Link\r\n                    to={item.toLowerCase().replace(' ', '') === 'myprofile' ? 'myprofile/mypersonalinfo' : item.toLowerCase().replace(' ', '')}\r\n                    className=\"droplist-item\"\r\n                    onClick={() => toggle(item === 'Logout')}>\r\n                    {item}\r\n                  </Link>\r\n              </motion.div>\r\n            ))\r\n          } </motion.div>\r\n      } </AnimatePresence>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Burgerlist\r\n","const burgerMenu = {\r\n\r\n  initial: { opacity: 1, scale: 0 },\r\n  final: {\r\n    opacity: 1,\r\n    scale: 1,\r\n    transition: {\r\n      delayChildren: 0.3,\r\n      staggerChildren: 0.2\r\n    }\r\n  },\r\n  exit: {\r\n    opacity: 0,\r\n    transition: {\r\n      duration: 0.5\r\n    }\r\n  }\r\n}\r\n\r\nconst burgerItem = {\r\n  initial: { y: 20, opacity: 0 },\r\n  final: {\r\n    y: 0,\r\n    opacity: 1\r\n  }\r\n}\r\n\r\n\r\nexport { burgerMenu, burgerItem };\r\n","import Burgerlist from \"./burgerlist/Burgerlist\";\r\nimport { useContext } from \"react\";\r\nimport { authContext } from \"../../shared/context/auth-context\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\n\r\nconst Nav = () => {\r\n\r\n  const auth = useContext(authContext)\r\n  return (\r\n    <>\r\n      <nav className=\"flex-row fjust-between\">\r\n        <Link to='/' className=\"image-link\"><img className='full-logo' src=\"/media/imgs/fulllogo.jpg\" alt=\"\" /></Link>\r\n\r\n        <div className=\"nav-items flex-row fjust-around falign-center\">\r\n          {(auth.userRole === null) &&\r\n            <div className=\"links-wrapper flex-row fjust-around \">\r\n              <NavLink\r\n                to='/'\r\n                className={({ isActive }) =>\r\n                  isActive ? 'nav-item active-link' : 'nav-item'\r\n                }>Home</NavLink>\r\n              <NavLink\r\n                to='/appointment'\r\n                className={({ isActive }) =>\r\n                  isActive ? 'nav-item active-link' : 'nav-item'\r\n                }\r\n              >Appointment</NavLink>\r\n              <NavLink\r\n                to='/adoption'\r\n                className={({ isActive }) =>\r\n                  isActive ? 'nav-item active-link' : 'nav-item'\r\n                }\r\n              >Adoption</NavLink>\r\n              <NavLink\r\n                to='/about'\r\n                className={({ isActive }) =>\r\n                  isActive ? 'nav-item active-link' : 'nav-item'\r\n                }\r\n              >About</NavLink>\r\n              <NavLink\r\n                to='/registerpet'\r\n                className={({ isActive }) =>\r\n                  isActive ? 'nav-item active-link' : 'nav-item'\r\n                }\r\n              >Add pet</NavLink>\r\n\r\n            </div>\r\n          }\r\n\r\n\r\n          <div className=\"btn-wrapper flex-row fjust-start gap-8p\">\r\n            {auth.isLoggedIn && auth.userRole === null &&\r\n              <Link\r\n                className=\"btn-s\"\r\n                to='/myprofile/mypersonalinfo'>My profile</Link>}\r\n          \r\n            {auth.isLoggedIn && <button onClick={() => {\r\n              auth.logout()\r\n            }} className=\"btn-s\">Logout</button>}\r\n            {!auth.isLoggedIn &&\r\n              <Link\r\n                className=\"btn-s\"\r\n                to='/login'>Login</Link>}\r\n            {!auth.isLoggedIn &&\r\n              <Link\r\n                className=\"btn-s\"\r\n                to='/signup'>Signup</Link>}\r\n\r\n          </div>\r\n        </div>\r\n\r\n        <Burgerlist />\r\n\r\n      </nav>\r\n    </>\r\n  )\r\n}\r\nexport default Nav;","import * as React from 'react';\nimport { useMemo } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.js';\nimport { useConstant } from '../../utils/use-constant.js';\n\nvar presenceId = 0;\nfunction getPresenceId() {\n    var id = presenceId;\n    presenceId++;\n    return id;\n}\nvar PresenceChild = function (_a) {\n    var children = _a.children, initial = _a.initial, isPresent = _a.isPresent, onExitComplete = _a.onExitComplete, custom = _a.custom, presenceAffectsLayout = _a.presenceAffectsLayout;\n    var presenceChildren = useConstant(newChildrenMap);\n    var id = useConstant(getPresenceId);\n    var context = useMemo(function () { return ({\n        id: id,\n        initial: initial,\n        isPresent: isPresent,\n        custom: custom,\n        onExitComplete: function (childId) {\n            presenceChildren.set(childId, true);\n            var allComplete = true;\n            presenceChildren.forEach(function (isComplete) {\n                if (!isComplete)\n                    allComplete = false;\n            });\n            allComplete && (onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete());\n        },\n        register: function (childId) {\n            presenceChildren.set(childId, false);\n            return function () { return presenceChildren.delete(childId); };\n        },\n    }); }, \n    /**\n     * If the presence of a child affects the layout of the components around it,\n     * we want to make a new context value to ensure they get re-rendered\n     * so they can detect that layout change.\n     */\n    presenceAffectsLayout ? undefined : [isPresent]);\n    useMemo(function () {\n        presenceChildren.forEach(function (_, key) { return presenceChildren.set(key, false); });\n    }, [isPresent]);\n    /**\n     * If there's no `motion` components to fire exit animations, we want to remove this\n     * component immediately.\n     */\n    React.useEffect(function () {\n        !isPresent && !presenceChildren.size && (onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete());\n    }, [isPresent]);\n    return (React.createElement(PresenceContext.Provider, { value: context }, children));\n};\nfunction newChildrenMap() {\n    return new Map();\n}\n\nexport { PresenceChild };\n","import { __spreadArray, __read } from 'tslib';\nimport * as React from 'react';\nimport { useContext, useRef, cloneElement, Children, isValidElement } from 'react';\nimport { useForceUpdate } from '../../utils/use-force-update.js';\nimport { PresenceChild } from './PresenceChild.js';\nimport { SharedLayoutContext, isSharedLayout } from '../../context/SharedLayoutContext.js';\n\nfunction getChildKey(child) {\n    return child.key || \"\";\n}\nfunction updateChildLookup(children, allChildren) {\n    var seenChildren = process.env.NODE_ENV !== \"production\" ? new Set() : null;\n    children.forEach(function (child) {\n        var key = getChildKey(child);\n        if (process.env.NODE_ENV !== \"production\" && seenChildren) {\n            if (seenChildren.has(key)) {\n                console.warn(\"Children of AnimatePresence require unique keys. \\\"\" + key + \"\\\" is a duplicate.\");\n            }\n            seenChildren.add(key);\n        }\n        allChildren.set(key, child);\n    });\n}\nfunction onlyElements(children) {\n    var filtered = [];\n    // We use forEach here instead of map as map mutates the component key by preprending `.$`\n    Children.forEach(children, function (child) {\n        if (isValidElement(child))\n            filtered.push(child);\n    });\n    return filtered;\n}\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * @library\n *\n * Any `Frame` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { Frame, AnimatePresence } from 'framer'\n *\n * // As items are added and removed from `items`\n * export function Items({ items }) {\n *   return (\n *     <AnimatePresence>\n *       {items.map(item => (\n *         <Frame\n *           key={item.id}\n *           initial={{ opacity: 0 }}\n *           animate={{ opacity: 1 }}\n *           exit={{ opacity: 0 }}\n *         />\n *       ))}\n *     </AnimatePresence>\n *   )\n * }\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * @motion\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */\nvar AnimatePresence = function (_a) {\n    var children = _a.children, custom = _a.custom, _b = _a.initial, initial = _b === void 0 ? true : _b, onExitComplete = _a.onExitComplete, exitBeforeEnter = _a.exitBeforeEnter, _c = _a.presenceAffectsLayout, presenceAffectsLayout = _c === void 0 ? true : _c;\n    // We want to force a re-render once all exiting animations have finished. We\n    // either use a local forceRender function, or one from a parent context if it exists.\n    var forceRender = useForceUpdate();\n    var layoutContext = useContext(SharedLayoutContext);\n    if (isSharedLayout(layoutContext)) {\n        forceRender = layoutContext.forceUpdate;\n    }\n    var isInitialRender = useRef(true);\n    // Filter out any children that aren't ReactElements. We can only track ReactElements with a props.key\n    var filteredChildren = onlyElements(children);\n    // Keep a living record of the children we're actually rendering so we\n    // can diff to figure out which are entering and exiting\n    var presentChildren = useRef(filteredChildren);\n    // A lookup table to quickly reference components by key\n    var allChildren = useRef(new Map())\n        .current;\n    // A living record of all currently exiting components.\n    var exiting = useRef(new Set()).current;\n    updateChildLookup(filteredChildren, allChildren);\n    // If this is the initial component render, just deal with logic surrounding whether\n    // we play onMount animations or not.\n    if (isInitialRender.current) {\n        isInitialRender.current = false;\n        return (React.createElement(React.Fragment, null, filteredChildren.map(function (child) { return (React.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, initial: initial ? undefined : false, presenceAffectsLayout: presenceAffectsLayout }, child)); })));\n    }\n    // If this is a subsequent render, deal with entering and exiting children\n    var childrenToRender = __spreadArray([], __read(filteredChildren));\n    // Diff the keys of the currently-present and target children to update our\n    // exiting list.\n    var presentKeys = presentChildren.current.map(getChildKey);\n    var targetKeys = filteredChildren.map(getChildKey);\n    // Diff the present children with our target children and mark those that are exiting\n    var numPresent = presentKeys.length;\n    for (var i = 0; i < numPresent; i++) {\n        var key = presentKeys[i];\n        if (targetKeys.indexOf(key) === -1) {\n            exiting.add(key);\n        }\n        else {\n            // In case this key has re-entered, remove from the exiting list\n            exiting.delete(key);\n        }\n    }\n    // If we currently have exiting children, and we're deferring rendering incoming children\n    // until after all current children have exiting, empty the childrenToRender array\n    if (exitBeforeEnter && exiting.size) {\n        childrenToRender = [];\n    }\n    // Loop through all currently exiting components and clone them to overwrite `animate`\n    // with any `exit` prop they might have defined.\n    exiting.forEach(function (key) {\n        // If this component is actually entering again, early return\n        if (targetKeys.indexOf(key) !== -1)\n            return;\n        var child = allChildren.get(key);\n        if (!child)\n            return;\n        var insertionIndex = presentKeys.indexOf(key);\n        var onExit = function () {\n            allChildren.delete(key);\n            exiting.delete(key);\n            // Remove this child from the present children\n            var removeIndex = presentChildren.current.findIndex(function (presentChild) { return presentChild.key === key; });\n            presentChildren.current.splice(removeIndex, 1);\n            // Defer re-rendering until all exiting children have indeed left\n            if (!exiting.size) {\n                presentChildren.current = filteredChildren;\n                forceRender();\n                onExitComplete && onExitComplete();\n            }\n        };\n        childrenToRender.splice(insertionIndex, 0, React.createElement(PresenceChild, { key: getChildKey(child), isPresent: false, onExitComplete: onExit, custom: custom, presenceAffectsLayout: presenceAffectsLayout }, child));\n    });\n    // Add `MotionContext` even to children that don't need it to ensure we're rendering\n    // the same tree between renders\n    childrenToRender = childrenToRender.map(function (child) {\n        var key = child.key;\n        return exiting.has(key) ? (child) : (React.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, presenceAffectsLayout: presenceAffectsLayout }, child));\n    });\n    presentChildren.current = childrenToRender;\n    if (process.env.NODE_ENV !== \"production\" &&\n        exitBeforeEnter &&\n        childrenToRender.length > 1) {\n        console.warn(\"You're attempting to animate multiple children within AnimatePresence, but its exitBeforeEnter prop is set to true. This will lead to odd visual behaviour.\");\n    }\n    return (React.createElement(React.Fragment, null, exiting.size\n        ? childrenToRender\n        : childrenToRender.map(function (child) { return cloneElement(child); })));\n};\n\nexport { AnimatePresence };\n","import { __read } from 'tslib';\nimport { useCallback, useRef, useState } from 'react';\nimport { useUnmountEffect } from './use-unmount-effect.js';\n\nfunction useForceUpdate() {\n    var unloadingRef = useRef(false);\n    var _a = __read(useState(0), 2), forcedRenderCount = _a[0], setForcedRenderCount = _a[1];\n    useUnmountEffect(function () { return (unloadingRef.current = true); });\n    return useCallback(function () {\n        !unloadingRef.current && setForcedRenderCount(forcedRenderCount + 1);\n    }, [forcedRenderCount]);\n}\n\nexport { useForceUpdate };\n"],"sourceRoot":""}