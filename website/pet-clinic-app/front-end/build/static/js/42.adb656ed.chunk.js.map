{"version":3,"sources":["components/pages/home/slider/Slider.js","components/pages/home/slider/sliderAnimation.js","components/pages/home/cards/Cards.js","components/pages/home/Home.js","../node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.js","../node_modules/framer-motion/dist/es/components/AnimatePresence/index.js","../node_modules/framer-motion/dist/es/utils/use-force-update.js"],"names":["sliderMotion","initial","x","y","final","transition","duration","exit","Slider","useState","slider","setSlider","position","useRef","moveSlider","event","target","className","current","length","map","value","index","pagSlide","keyIndex","search","pagValue","Number","alt","src","onClick","AnimatePresence","motion","div","variants","animate","to","Cards","Home","presenceId","getPresenceId","id","PresenceChild","_a","children","isPresent","onExitComplete","custom","presenceAffectsLayout","presenceChildren","useConstant","newChildrenMap","context","useMemo","childId","set","allComplete","forEach","isComplete","register","delete","undefined","_","key","React","size","PresenceContext","Provider","Map","getChildKey","child","_b","exitBeforeEnter","_c","forceRender","unloadingRef","__read","forcedRenderCount","setForcedRenderCount","useUnmountEffect","useCallback","useForceUpdate","layoutContext","useContext","SharedLayoutContext","isSharedLayout","forceUpdate","isInitialRender","filteredChildren","filtered","Children","isValidElement","push","onlyElements","presentChildren","allChildren","exiting","Set","updateChildLookup","childrenToRender","__spreadArray","presentKeys","targetKeys","numPresent","i","indexOf","add","get","insertionIndex","splice","removeIndex","findIndex","presentChild","has","cloneElement"],"mappings":"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","file":"static/js/42.adb656ed.chunk.js","sourcesContent":["import { useState, useRef } from \"react\"\r\nimport { Link } from \"react-router-dom\"\r\n\r\n//Import Animation object from sliderAnimation.js\r\nimport { contentSlider } from \"./sliderAnimation\"\r\n\r\n//Import motion for defining entering motion, and AnimatePresence to define exit animation\r\nimport { AnimatePresence, motion } from \"framer-motion\"\r\n\r\n\r\n\r\n// Assign the imported object to local object sliderMotion\r\nconst sliderMotion = contentSlider\r\n\r\nconst Slider = () => {\r\n\r\n  // The slider state array represents the state of the slider where true is the current active slide that should be rendered\r\n  const [slider, setSlider] = useState([true, false, false, false])\r\n\r\n  // The position Ref is used to determine the direction of the movement right-> left or left->right by keeping the old position as the first index and the new position as the second index\r\n  const position = useRef([0, 0]);\r\n\r\n  // moveSlider will be called whenever left or right indicator is pressed and it will set the slider state using setSlider  \r\n  const moveSlider = (event) => {\r\n\r\n    //if the pressed indicator has right class it means it's right movement otherwise it is left movement\r\n    if (event.target.className === 'right') {\r\n      // check whether index is out of array range\r\n      if (position.current[1] + 1 !== slider.length) {\r\n        // its a right movement so modify position Ref by making the current index an old index and the new index is the previous new index + 1\r\n        position.current[0] = position.current[1]\r\n        position.current[1] = position.current[1] + 1\r\n\r\n        //specify the initial and exit motion based on right movement\r\n        sliderMotion.initial.x = '97vw'\r\n        sliderMotion.exit.x = '-97vw'\r\n\r\n        // Modifying the slider state by calling setSlider(), here for each value in the slider array if the value's index is either old or the new index in the position ref then it should be flipped meaning true->false and false->true\r\n        setSlider(() => {\r\n          return slider.map((value, index) => {\r\n            return (index === position.current[0] || index === position.current[1]) ? !value : value\r\n          })\r\n        })\r\n\r\n        // if we reached the end of the array\r\n      } else {\r\n\r\n        // when we cannot go right any more and we click right we will back to the begining meaning to the position 0, so the old index will be 3 and the new index will be 0 \r\n        position.current[0] = 3\r\n        position.current[1] = 0\r\n\r\n        //specify the initial and exit motion based on right movement\r\n        sliderMotion.initial.x = '97vw'\r\n        sliderMotion.exit.x = '-97vw'\r\n\r\n        //call setSlider() to modify the state array, here we are starting from the begining so the first array element will be true and the rest are false\r\n        setSlider(() => {\r\n          return [true, false, false, false]\r\n        })\r\n      }\r\n\r\n      // If the movement is to the left meaning the left indicator is pressed\r\n    } else {\r\n\r\n      // check whether index is out of array range\r\n      if (position.current[1] - 1 >= 0) {\r\n\r\n        // its a left movement so modify position Ref by making the current index an old index and the new index is the previous new index - 1\r\n        position.current[0] = position.current[1]\r\n        position.current[1] = position.current[1] - 1\r\n\r\n        //specify the initial and exit motion based on left movement\r\n        sliderMotion.initial.x = '-97vw'\r\n        sliderMotion.exit.x = '97vw'\r\n\r\n        // same as right movement idea\r\n        setSlider(() => {\r\n          return slider.map((value, index) => {\r\n            return (index === position.current[0] || index === position.current[1]) ? !value : value\r\n          })\r\n        })\r\n\r\n        //If index is out of range similar idea to the right movement\r\n      } else {\r\n        position.current[0] = 0\r\n        position.current[1] = 3\r\n        setSlider(() => {\r\n          return [false, false, false, true]\r\n        })\r\n      }\r\n    }\r\n  }\r\n  // This function will be called whenever a pagintation is pressed\r\n  const pagSlide = (event) => {\r\n    // each of the pagintations has a class of k-number like k0 k1 k2 k3 so to know which pagintatin is pressed we find the 'k' index and the char after it is the number of the pagintation that was pressed\r\n    const keyIndex = event.target.className.search('k')\r\n    const pagValue = event.target.className[keyIndex + 1]\r\n\r\n    //to go to the new position we save the previous position in the old position and we make the new position as the number of the pagintation.\r\n    position.current[0] = position.current[1]\r\n    position.current[1] = Number(pagValue)\r\n\r\n    // we determine the direction of the movement left->right or right->left to know which animation values should be used and this is done by checking the position Ref , if for example position has [x, y] and if y>x then it is a right movement else it is a left movement\r\n    sliderMotion.initial.x = position.current[0] <= position.current[1] ? '97vw' : '-97vw'\r\n    sliderMotion.exit.x = position.current[0] >= position.current[1] ? '97vw' : '-97vw'\r\n\r\n    // we modify the slider state based on the movement\r\n    setSlider(() => {\r\n      return slider.map((value, index) => {\r\n        return (index === position.current[0] || index === position.current[1]) ? !value : value\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      <div className=\"slider-container flex-col gap-16p falign-center\">\r\n        <img alt =\"direction\" src=\"/media/imgs/right.png\" className=\"right\"\r\n          onClick={(event) => moveSlider(event)}></img>\r\n        <img alt =\"direction\" src=\"/media/imgs/left.png\" className=\"left\"\r\n          onClick={(event) => moveSlider(event)}></img>\r\n        <div className=\"pag flex-row gap-8p fjust-center\">\r\n\r\n          {/* we compare each pagintation with the slider array to know whether it is an active pagintation or not so that when can color it differently   */}\r\n          <i onClick={(event) => pagSlide(event)} className={slider[0] === true ? \"fas k0 fa-dot-circle active \" : \"fas k0 fa-dot-circle\"}></i>\r\n          <i onClick={(event) => pagSlide(event)} className={slider[1] === true ? \"fas k1 fa-dot-circle active \" : \"fas k1 fa-dot-circle\"}></i>\r\n          <i onClick={(event) => pagSlide(event)} className={slider[2] === true ? \"fas k2 fa-dot-circle active \" : \"fas k2 fa-dot-circle\"}></i>\r\n          <i onClick={(event) => pagSlide(event)} className={slider[3] === true ? \"fas k3 fa-dot-circle active \" : \"fas k3 fa-dot-circle\"}></i>\r\n        </div>\r\n        <div className=\"animation-container\">\r\n          {/* An element that has an exit animation should be wrapped with Animate presence */}\r\n          <AnimatePresence>\r\n\r\n            {/* conditional rendering of the slide based on slider array, each element will be rendered will have an entering animation and that is achieved using motion. before the element name, also variants, initial, animate and exit should be specified to indicate the movements object, initial state, final state and exit state accordingly  */}\r\n            {slider[0] && <motion.div\r\n              variants={sliderMotion}\r\n              initial='initial'\r\n              animate='final'\r\n              exit='exit'\r\n              className=\"slide-content flex-col  gap-24p\">\r\n              <h1>Appointments</h1>\r\n              <p>Examination, grooming, check-up and more!</p>\r\n              \r\n              <Link to='/appointment' className=\"btn-rec-purple\">Make an appointment</Link>\r\n              <img className=\"slider-img-desktop\" src=\"/media/imgs/appointment.jpg\" alt=\"app\" />\r\n              <img className=\"slider-img-mobile\" src=\"/media/imgs/vertical-appointment.jpg\" alt=\"app\" />\r\n            </motion.div>\r\n            }\r\n          </AnimatePresence>\r\n          <AnimatePresence>\r\n            {\r\n              slider[1] &&\r\n              <motion.div\r\n                variants={sliderMotion}\r\n                initial=\"initial\"\r\n                animate=\"final\"\r\n                exit='exit'\r\n                className=\"slide-content flex-col  gap-24p\">\r\n                <h1>Adoption</h1>\r\n                <p>Find pets to adopt or find a home for your pet</p>\r\n                \r\n                <Link to='/adoptionads' className=\"btn-rec-purple\">Go to adoption posts</Link>\r\n                <img className=\"slider-img-desktop\" src=\"/media/imgs/shelter.jpg\" alt=\"app\" />\r\n                <img className=\"slider-img-mobile\" src=\"/media/imgs/vertical-shelter.jpg\" alt=\"app\" />\r\n              </motion.div>\r\n\r\n            }\r\n          </AnimatePresence>\r\n          <AnimatePresence>\r\n            {\r\n              slider[2] &&\r\n              <motion.div\r\n                variants={sliderMotion}\r\n                initial=\"initial\"\r\n                animate=\"final\"\r\n                exit='exit'\r\n                className=\"slide-content flex-col  gap-24p\">\r\n                <h1>Pet Training</h1>\r\n                <p>Get your pet trained by our professional trainers</p>\r\n                \r\n                <Link to='/trainings' className=\"btn-rec-purple\">Check trainings</Link>\r\n                <img className=\"slider-img-desktop\" src=\"/media/imgs/training.jpg\" alt=\"app\" />\r\n                <img className=\"slider-img-mobile\" src=\"/media/imgs/vertical-training.jpg\" alt=\"app\" />\r\n              </motion.div>\r\n\r\n            }\r\n          </AnimatePresence>\r\n          <AnimatePresence>\r\n            {\r\n              slider[3] &&\r\n              <motion.div\r\n                variants={sliderMotion}\r\n                initial=\"initial\"\r\n                animate=\"final\"\r\n                exit='exit'\r\n                className=\"slide-content flex-col  gap-24p\">\r\n                <h1>Register your pet</h1>\r\n                <p>Add your pet to our family</p>\r\n                \r\n                <Link to='/registerpet' className=\"btn-rec-purple\">Register meow!</Link>\r\n                \r\n                <img className=\"slider-img-desktop\" src=\"/media/imgs/registerpet.jpg\" alt=\"app\" />\r\n                <img className=\"slider-img-mobile\" src=\"/media/imgs/vertical-register.jpg\" alt=\"app\" />\r\n              </motion.div>\r\n\r\n            }\r\n          </AnimatePresence>\r\n\r\n\r\n        </div>\r\n\r\n\r\n\r\n\r\n      </div>\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Slider\r\n","// Each component my have one or more animations for each animation we difine an object that contains:\r\n// 1-initial property which tells the initial state of element at the begining of the animation\r\n// 2-final property which tells the final state of the element at the end of the animation\r\n// 3-exit property which tells the exit state of the element when it is removed from the VDOM\r\n// both final and exit properties has a transition property as well to give more detailed info about the animation\r\n// Note: initial, final and exit properties' names are arbitrary\r\nconst contentSlider = {\r\n  initial: {\r\n    x: '97vw',\r\n    y: 0,\r\n  },\r\n  final: {\r\n    x: 0,\r\n    transition: {\r\n      duration: 0.8\r\n    }\r\n  },\r\n  exit: {\r\n    x: '-97vw',\r\n    transition: {\r\n      duration: 0.8\r\n    }\r\n  },\r\n\r\n}\r\n\r\n\r\n\r\nexport { contentSlider };\r\n","\r\n\r\n// rafce react arrow function\r\nconst Cards = () => {\r\n    return (\r\n        <>\r\n            <div className=\"cards-main-container flex-col gap-16p falign-center\">\r\n\r\n                {/* first main flex item */}\r\n\r\n                <p className=\"main-header\">Your Pet Happiness Journey</p>\r\n\r\n                {/* 1-card second main flex item */}\r\n                <div className=\"card-container flex-col falign-center gap-16p\">\r\n\r\n                    {/* first mini-flex */}\r\n                    <img src=\"/media/imgs/pet-search.png\" alt=\"find-pet\"/>\r\n                    {/* second mini-flex */}\r\n                    <p className=\"card-title\">Adopt a pet</p>\r\n                    {/* third mini-flex */}\r\n                    <p className=\"card-desc\">\r\n                    It's easy to find a pet who's right for you at our shelter or through adoption ads posted by others.\r\n                    </p>\r\n\r\n                </div>\r\n                {/* 2-card third main flex item */}\r\n                <div className=\"card-container flex-col falign-center gap-16p\">\r\n\r\n                    {/* first mini-flex */}\r\n                    <img src=\"/media/imgs/pet-care.png\" alt=\"pet-care\"/>\r\n                    {/* second mini-flex */}\r\n                    <p className=\"card-title\">Pet care</p>\r\n                    {/* third mini-flex */}\r\n                    <p className=\"card-desc\">\r\n                       We take care of your pet by the hands of various groomers, doctors and trainers.\r\n                    </p>\r\n\r\n                </div>\r\n                {/* 3-card fourth main flex item */}\r\n                <div className=\"card-container flex-col falign-center gap-16p\">\r\n\r\n                    {/* first mini-flex */}\r\n                    <img src=\"/media/imgs/pet-shelter.png\" alt=\"pet-shelter\"/>\r\n                    {/* second mini-flex */}\r\n                    <p className=\"card-title\">Find a home</p>\r\n                    {/* third mini-flex */}\r\n                    <p className=\"card-desc\">\r\n                     Submit a pet to our shelter or post an adoption ad to find a loving home for the pet.\r\n                    </p>\r\n\r\n                </div>\r\n              \r\n\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Cards\r\n","import Slider from \"./slider/Slider\";\r\nimport Cards from \"./cards/Cards\";\r\n\r\nconst Home = () => {\r\n    return (\r\n        <>\r\n            <div className=\"home-container flex-col\">\r\n              <Slider />\r\n              <Cards />\r\n              \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Home;\r\n","import * as React from 'react';\nimport { useMemo } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.js';\nimport { useConstant } from '../../utils/use-constant.js';\n\nvar presenceId = 0;\nfunction getPresenceId() {\n    var id = presenceId;\n    presenceId++;\n    return id;\n}\nvar PresenceChild = function (_a) {\n    var children = _a.children, initial = _a.initial, isPresent = _a.isPresent, onExitComplete = _a.onExitComplete, custom = _a.custom, presenceAffectsLayout = _a.presenceAffectsLayout;\n    var presenceChildren = useConstant(newChildrenMap);\n    var id = useConstant(getPresenceId);\n    var context = useMemo(function () { return ({\n        id: id,\n        initial: initial,\n        isPresent: isPresent,\n        custom: custom,\n        onExitComplete: function (childId) {\n            presenceChildren.set(childId, true);\n            var allComplete = true;\n            presenceChildren.forEach(function (isComplete) {\n                if (!isComplete)\n                    allComplete = false;\n            });\n            allComplete && (onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete());\n        },\n        register: function (childId) {\n            presenceChildren.set(childId, false);\n            return function () { return presenceChildren.delete(childId); };\n        },\n    }); }, \n    /**\n     * If the presence of a child affects the layout of the components around it,\n     * we want to make a new context value to ensure they get re-rendered\n     * so they can detect that layout change.\n     */\n    presenceAffectsLayout ? undefined : [isPresent]);\n    useMemo(function () {\n        presenceChildren.forEach(function (_, key) { return presenceChildren.set(key, false); });\n    }, [isPresent]);\n    /**\n     * If there's no `motion` components to fire exit animations, we want to remove this\n     * component immediately.\n     */\n    React.useEffect(function () {\n        !isPresent && !presenceChildren.size && (onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete());\n    }, [isPresent]);\n    return (React.createElement(PresenceContext.Provider, { value: context }, children));\n};\nfunction newChildrenMap() {\n    return new Map();\n}\n\nexport { PresenceChild };\n","import { __spreadArray, __read } from 'tslib';\nimport * as React from 'react';\nimport { useContext, useRef, cloneElement, Children, isValidElement } from 'react';\nimport { useForceUpdate } from '../../utils/use-force-update.js';\nimport { PresenceChild } from './PresenceChild.js';\nimport { SharedLayoutContext, isSharedLayout } from '../../context/SharedLayoutContext.js';\n\nfunction getChildKey(child) {\n    return child.key || \"\";\n}\nfunction updateChildLookup(children, allChildren) {\n    var seenChildren = process.env.NODE_ENV !== \"production\" ? new Set() : null;\n    children.forEach(function (child) {\n        var key = getChildKey(child);\n        if (process.env.NODE_ENV !== \"production\" && seenChildren) {\n            if (seenChildren.has(key)) {\n                console.warn(\"Children of AnimatePresence require unique keys. \\\"\" + key + \"\\\" is a duplicate.\");\n            }\n            seenChildren.add(key);\n        }\n        allChildren.set(key, child);\n    });\n}\nfunction onlyElements(children) {\n    var filtered = [];\n    // We use forEach here instead of map as map mutates the component key by preprending `.$`\n    Children.forEach(children, function (child) {\n        if (isValidElement(child))\n            filtered.push(child);\n    });\n    return filtered;\n}\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * @library\n *\n * Any `Frame` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { Frame, AnimatePresence } from 'framer'\n *\n * // As items are added and removed from `items`\n * export function Items({ items }) {\n *   return (\n *     <AnimatePresence>\n *       {items.map(item => (\n *         <Frame\n *           key={item.id}\n *           initial={{ opacity: 0 }}\n *           animate={{ opacity: 1 }}\n *           exit={{ opacity: 0 }}\n *         />\n *       ))}\n *     </AnimatePresence>\n *   )\n * }\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * @motion\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */\nvar AnimatePresence = function (_a) {\n    var children = _a.children, custom = _a.custom, _b = _a.initial, initial = _b === void 0 ? true : _b, onExitComplete = _a.onExitComplete, exitBeforeEnter = _a.exitBeforeEnter, _c = _a.presenceAffectsLayout, presenceAffectsLayout = _c === void 0 ? true : _c;\n    // We want to force a re-render once all exiting animations have finished. We\n    // either use a local forceRender function, or one from a parent context if it exists.\n    var forceRender = useForceUpdate();\n    var layoutContext = useContext(SharedLayoutContext);\n    if (isSharedLayout(layoutContext)) {\n        forceRender = layoutContext.forceUpdate;\n    }\n    var isInitialRender = useRef(true);\n    // Filter out any children that aren't ReactElements. We can only track ReactElements with a props.key\n    var filteredChildren = onlyElements(children);\n    // Keep a living record of the children we're actually rendering so we\n    // can diff to figure out which are entering and exiting\n    var presentChildren = useRef(filteredChildren);\n    // A lookup table to quickly reference components by key\n    var allChildren = useRef(new Map())\n        .current;\n    // A living record of all currently exiting components.\n    var exiting = useRef(new Set()).current;\n    updateChildLookup(filteredChildren, allChildren);\n    // If this is the initial component render, just deal with logic surrounding whether\n    // we play onMount animations or not.\n    if (isInitialRender.current) {\n        isInitialRender.current = false;\n        return (React.createElement(React.Fragment, null, filteredChildren.map(function (child) { return (React.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, initial: initial ? undefined : false, presenceAffectsLayout: presenceAffectsLayout }, child)); })));\n    }\n    // If this is a subsequent render, deal with entering and exiting children\n    var childrenToRender = __spreadArray([], __read(filteredChildren));\n    // Diff the keys of the currently-present and target children to update our\n    // exiting list.\n    var presentKeys = presentChildren.current.map(getChildKey);\n    var targetKeys = filteredChildren.map(getChildKey);\n    // Diff the present children with our target children and mark those that are exiting\n    var numPresent = presentKeys.length;\n    for (var i = 0; i < numPresent; i++) {\n        var key = presentKeys[i];\n        if (targetKeys.indexOf(key) === -1) {\n            exiting.add(key);\n        }\n        else {\n            // In case this key has re-entered, remove from the exiting list\n            exiting.delete(key);\n        }\n    }\n    // If we currently have exiting children, and we're deferring rendering incoming children\n    // until after all current children have exiting, empty the childrenToRender array\n    if (exitBeforeEnter && exiting.size) {\n        childrenToRender = [];\n    }\n    // Loop through all currently exiting components and clone them to overwrite `animate`\n    // with any `exit` prop they might have defined.\n    exiting.forEach(function (key) {\n        // If this component is actually entering again, early return\n        if (targetKeys.indexOf(key) !== -1)\n            return;\n        var child = allChildren.get(key);\n        if (!child)\n            return;\n        var insertionIndex = presentKeys.indexOf(key);\n        var onExit = function () {\n            allChildren.delete(key);\n            exiting.delete(key);\n            // Remove this child from the present children\n            var removeIndex = presentChildren.current.findIndex(function (presentChild) { return presentChild.key === key; });\n            presentChildren.current.splice(removeIndex, 1);\n            // Defer re-rendering until all exiting children have indeed left\n            if (!exiting.size) {\n                presentChildren.current = filteredChildren;\n                forceRender();\n                onExitComplete && onExitComplete();\n            }\n        };\n        childrenToRender.splice(insertionIndex, 0, React.createElement(PresenceChild, { key: getChildKey(child), isPresent: false, onExitComplete: onExit, custom: custom, presenceAffectsLayout: presenceAffectsLayout }, child));\n    });\n    // Add `MotionContext` even to children that don't need it to ensure we're rendering\n    // the same tree between renders\n    childrenToRender = childrenToRender.map(function (child) {\n        var key = child.key;\n        return exiting.has(key) ? (child) : (React.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, presenceAffectsLayout: presenceAffectsLayout }, child));\n    });\n    presentChildren.current = childrenToRender;\n    if (process.env.NODE_ENV !== \"production\" &&\n        exitBeforeEnter &&\n        childrenToRender.length > 1) {\n        console.warn(\"You're attempting to animate multiple children within AnimatePresence, but its exitBeforeEnter prop is set to true. This will lead to odd visual behaviour.\");\n    }\n    return (React.createElement(React.Fragment, null, exiting.size\n        ? childrenToRender\n        : childrenToRender.map(function (child) { return cloneElement(child); })));\n};\n\nexport { AnimatePresence };\n","import { __read } from 'tslib';\nimport { useCallback, useRef, useState } from 'react';\nimport { useUnmountEffect } from './use-unmount-effect.js';\n\nfunction useForceUpdate() {\n    var unloadingRef = useRef(false);\n    var _a = __read(useState(0), 2), forcedRenderCount = _a[0], setForcedRenderCount = _a[1];\n    useUnmountEffect(function () { return (unloadingRef.current = true); });\n    return useCallback(function () {\n        !unloadingRef.current && setForcedRenderCount(forcedRenderCount + 1);\n    }, [forcedRenderCount]);\n}\n\nexport { useForceUpdate };\n"],"sourceRoot":""}